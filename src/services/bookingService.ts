import { supabase } from '@/lib/supabase.js';

// Configura√ß√µes do neg√≥cio
const BUSINESS_CONFIG = {
  startHour: 8,
  endHour: 18,
  breakStart: 12,
  breakEnd: 14,
  bufferTime: 15, // minutos entre agendamentos
  minAdvanceTime: 60 // m√≠nimo 1 hora de anteced√™ncia
};

// Dura√ß√£o dos servi√ßos (em minutos)
const SERVICE_DURATIONS: { [key: string]: number } = {
  'Corte Masculino': 30,
  'Barba': 20,
  'Corte + Barba': 45,
  'Sobrancelha': 15,
  'Pigmenta√ß√£o': 60
};

export const bookingService = {
  // Verificar se um hor√°rio est√° dispon√≠vel
  async isSlotAvailable(date: string, time: string, service: string, barber: string): Promise<boolean> {
    try {
      // Primeiro verificar se o hor√°rio √© v√°lido (n√£o passado)
      if (!this.isTimeValid(date, time)) {
        console.log(`‚ùå Hor√°rio ${time} inv√°lido (passado)`);
        return false;
      }
      
      const serviceDuration = SERVICE_DURATIONS[service] || 30;
      
      // Buscar agendamentos existentes para o barbeiro na data
      const { data: existingAppointments } = await supabase
        .from('appointments')
        .select('time')
        .eq('date', date)
        .eq('barber', barber);
      
      if (!existingAppointments || existingAppointments.length === 0) {
        console.log(`‚úÖ Hor√°rio ${time} dispon√≠vel (sem conflitos)`);
        return true;
      }
      
      // Verificar conflitos de hor√°rio
      const selectedTime = time;
      const selectedMinutes = this.timeToMinutes(selectedTime);
      const selectedEndMinutes = selectedMinutes + serviceDuration;
      
      for (const appointment of existingAppointments) {
        const aptTime = appointment.time;
        const aptMinutes = this.timeToMinutes(aptTime);
        const aptDuration = SERVICE_DURATIONS[service] || 30;
        const aptEndMinutes = aptMinutes + aptDuration;
        
        // Verificar sobreposi√ß√£o
        if ((selectedMinutes < aptEndMinutes && selectedEndMinutes > aptMinutes)) {
          console.log(`‚ùå Hor√°rio ${time} conflita com ${aptTime}`);
          return false;
        }
      }
      
      console.log(`‚úÖ Hor√°rio ${time} dispon√≠vel`);
      return true;
    } catch (error) {
      console.error('Erro ao verificar disponibilidade:', error);
      return false;
    }
  },

  // Converter hor√°rio para minutos
  timeToMinutes(time: string): number {
    const [hours, minutes] = time.split(':').map(Number);
    return hours * 60 + minutes;
  },

  // Gerar hor√°rios dispon√≠veis para uma data
  async getAvailableSlots(date: string, service: string, barber: string): Promise<string[]> {
    try {
      const serviceDuration = SERVICE_DURATIONS[service] || 30;
      const slots: string[] = [];
      const now = this.getCurrentDateTimeMontesClaros();
      const todayString = now.toISOString().split('T')[0]; // YYYY-MM-DD
      const isToday = date === todayString;
      
      console.log('üìÖ Debug de Data:');
      console.log('Data selecionada:', date);
      console.log('Data de hoje (Montes Claros):', todayString);
      console.log('√â hoje?', isToday);
      
      // Para hoje: hor√°rio atual + 1 hora de margem
      // Para outros dias: a partir das 8h
      const currentHour = now.getHours();
      const currentMinute = now.getMinutes();
      const minHour = isToday ? currentHour + 1 : BUSINESS_CONFIG.startHour;
      
      // Debug: Log do hor√°rio atual
      console.log('üïê Debug Agendamento (Montes Claros):');
      console.log('Data selecionada:', date);
      console.log('√â hoje?', isToday);
      console.log('Hor√°rio atual (Montes Claros):', `${currentHour}:${currentMinute.toString().padStart(2, '0')}`);
      console.log('Hora m√≠nima permitida:', minHour);
      
      for (let hour = BUSINESS_CONFIG.startHour; hour < BUSINESS_CONFIG.endHour; hour++) {
        // Pular hor√°rio de almo√ßo
        if (hour >= BUSINESS_CONFIG.breakStart && hour < BUSINESS_CONFIG.breakEnd) {
          continue;
        }
        
        // Pular hor√°rios passados
        if (hour < minHour) {
          console.log(`‚ùå Hor√°rio ${hour}:00 pulado (menor que ${minHour})`);
          continue;
        }
        
        // Se for hoje e for o hor√°rio m√≠nimo, verificar minutos
        if (isToday && hour === minHour && currentMinute > 30) {
          console.log(`‚ùå Hor√°rio ${hour}:00 pulado (minutos: ${currentMinute})`);
          continue;
        }
        
        // Verificar se o slot est√° dispon√≠vel
        const timeSlot = `${hour.toString().padStart(2, '0')}:00`;
        const isAvailable = await this.isSlotAvailable(date, timeSlot, service, barber);
        
        if (isAvailable) {
          console.log(`‚úÖ Hor√°rio ${timeSlot} dispon√≠vel`);
          slots.push(timeSlot);
        } else {
          console.log(`‚ùå Hor√°rio ${timeSlot} ocupado`);
        }
        
        // Adicionar hor√°rio de 30 minutos se couber
        if (hour < BUSINESS_CONFIG.endHour - 1) {
          const timeSlot30 = `${hour.toString().padStart(2, '0')}:30`;
          const isAvailable30 = await this.isSlotAvailable(date, timeSlot30, service, barber);
          
          if (isAvailable30) {
            console.log(`‚úÖ Hor√°rio ${timeSlot30} dispon√≠vel`);
            slots.push(timeSlot30);
          } else {
            console.log(`‚ùå Hor√°rio ${timeSlot30} ocupado`);
          }
        }
      }
      
      console.log('üìã Hor√°rios finais:', slots);
      return slots;
    } catch (error) {
      console.error('Erro ao gerar hor√°rios:', error);
      return [];
    }
  },

  // Criar agendamento
  async createAppointment(appointmentData: {
    client_name: string;
    client_phone: string;
    client_email?: string;
    service: string;
    barber: string;
    date: string;
    time: string;
    notes?: string;
  }) {
    try {
      // Verificar disponibilidade antes de criar
      const isAvailable = await this.isSlotAvailable(
        appointmentData.date,
        appointmentData.time,
        appointmentData.service,
        appointmentData.barber
      );
      
      if (!isAvailable) {
        throw new Error('Hor√°rio n√£o dispon√≠vel');
      }
      
      // Criar agendamento
      const { data, error } = await supabase
        .from('appointments')
        .insert([{
          ...appointmentData,
          status: 'pending'
        }])
        .select();
      
      if (error) throw error;
      return data[0];
    } catch (error) {
      console.error('Erro ao criar agendamento:', error);
      throw error;
    }
  },

  // Buscar agendamentos de um barbeiro em uma data
  async getBarberAppointments(date: string, barber: string) {
    try {
      const { data, error } = await supabase
        .from('appointments')
        .select('*')
        .eq('date', date)
        .eq('barber', barber)
        .order('time');
      
      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('Erro ao buscar agendamentos:', error);
      return [];
    }
  },

  // Obter data/hora atual em Montes Claros (UTC-3)
  getCurrentDateTimeMontesClaros(): Date {
    const now = new Date();
    // Montes Claros est√° no fuso UTC-3 (mesmo que Bras√≠lia)
    const montesClarosOffset = -3 * 60; // -3 horas em minutos
    const utc = now.getTime() + (now.getTimezoneOffset() * 60000);
    const montesClarosTime = new Date(utc + (montesClarosOffset * 60000));
    return montesClarosTime;
  },

  // Verificar se a data est√° no futuro
  isDateValid(date: string): boolean {
    const today = this.getCurrentDateTimeMontesClaros();
    const todayString = today.toISOString().split('T')[0]; // YYYY-MM-DD
    console.log('üìÖ Valida√ß√£o de Data:');
    console.log('Data selecionada:', date);
    console.log('Data de hoje (Montes Claros):', todayString);
    console.log('√â v√°lida?', date >= todayString);
    return date >= todayString;
  },

  // Verificar se o hor√°rio est√° no futuro (para hoje)
  isTimeValid(date: string, time: string): boolean {
    const now = this.getCurrentDateTimeMontesClaros();
    const todayString = now.toISOString().split('T')[0]; // YYYY-MM-DD
    const isToday = date === todayString;
    
    if (!isToday) return true;
    
    const [hours, minutes] = time.split(':').map(Number);
    const currentHour = now.getHours();
    const currentMinute = now.getMinutes();
    
    console.log('üïê Valida√ß√£o de Hor√°rio (Montes Claros):');
    console.log('Hor√°rio atual:', `${currentHour}:${currentMinute.toString().padStart(2, '0')}`);
    console.log('Hor√°rio selecionado:', time);
    
    // Se o hor√°rio selecionado j√° passou, n√£o √© v√°lido
    if (hours < currentHour) {
      console.log('‚ùå Hor√°rio passado (hora menor)');
      return false;
    }
    if (hours === currentHour && minutes <= currentMinute) {
      console.log('‚ùå Hor√°rio passado (minutos menores ou iguais)');
      return false;
    }
    
    // Adicionar margem de seguran√ßa de 1 hora
    const minHour = currentHour + 1;
    if (hours < minHour) {
      console.log('‚ùå Hor√°rio muito pr√≥ximo (menos de 1h)');
      return false;
    }
    
    console.log('‚úÖ Hor√°rio v√°lido');
    return true;
  }
};
